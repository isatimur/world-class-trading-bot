[project]
name = "trading-bot"
version = "1.0.0"
description = "Advanced Trading Agent with Google ADK Python and Bybit V5 API integration"
authors = [
    {name = "Trading Bot Team", email = "team@tradingbot.com"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["trading", "bot", "telegram", "ai", "finance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "python-telegram-bot>=20.7",
    "pybit>=5.7.0",
    "aiohttp>=3.9.1",
    "yfinance>=0.2.28",
    "pandas>=2.1.4",
    "numpy>=1.26.0",
    "ta>=0.10.2",
    "requests>=2.31.0",
    "structlog>=23.2.0",
    "psutil>=5.9.6",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.10.1",
    "pydantic>=2.10.6",
    "psycopg2-binary>=2.9.9",
    "matplotlib>=3.10.3",
    "seaborn>=0.13.2",
    "plotly>=6.2.0",
    "google-generativeai>=0.8.5",
    "scikit-learn>=1.7.1",
]

[project.optional-dependencies]
ai = [
    "google-adk>=1.7.0",
    "google-generativeai>=0.3.2",
    "google-auth>=2.23.4",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.1.1",
]

dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]

[project.scripts]
trading-bot = "trading_bot.__main__:main"
trading-bot-telegram = "telegram_bot_main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/trading_bot"]
include = [
    "src/trading_bot/**/*.py",
    "README.md",
    "env.example",
    "run_bot.py",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--asyncio-mode=auto",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
